
The goal of this assembler is to eventually not be simply an M68K
assembler, but to be relatively easily retargetable.  Also, this
assembler should be callable from other CL applications, as well as
executable as a stand-alone program.


Things to add in the grammar/parser/lexer:

Support for ' (single ASCII character?) -- only because the
	book I have says it's part of Motorola's standard.  Should it
	behave like double-quotes or what?
Support for floats (once FPU instructions are supported).
Line continuations with "\".
Literate input.


Things to add in the assembler:

CL-style macros?  (that would be cool!)
Checking ranges of types, signed indices, etc.
Support for later chips in the m68k line, and enabling/disabling
	allowance of their added instructions.
Nifty local labels a-la GNU as or similar.
Optimizations/data flow analysis.


Things to add in the linker:

[see st-linker/]
uh, the whole linker. ;-)
Atari ST bootfloppy target.
Atari ST PRG target.
linker scripts.


THINGS TO DO BEFORE RELEASE

- remove debugging output.
- add a decent warning/error display and logging system.
- temp-files/osicat.
- compile list of known issues, try to resolve.
- start converting improvised list structure into real structures or
  objects.


KNOWN ISSUES

- macro parameters are broken.  need to keep the strings of the
  operands around, operate on them, then feed them through the lexer
  and parser "late".  This includes \0.
- addq/subq are broken with immediate value #8. [codegen]
- no checking of vconstraints yet. [codegen]
- DC.B should handle strings properly (right now it will probably only
  write out the last byte). [assembler]


KNOWN MAJOR INCOMPATIBILITIES WITH DEVPAC

These are things which aren't likely to change soon.

Macros:

- we don't support < or > embedded in macro parameters which are
  already wrapped in < and >.  (eg: "<foo>>>>2>" => "foo>>2") [lexer]
